knitr::opts_chunk$set(echo = TRUE)
library(aghq)
library(TMB)
library(Matrix)
n_samp = 10000
compute_H_rue <- function(d,n){
H <- matrix(data = 0, nrow = n, ncol = n)
for (i in 2:(nrow(H)-1)) {
H[i,i] <- -(1/d[i-1]+1/d[i])
H[i,i-1] <- 1/d[i-1]
H[i,i+1] <- 1/d[i]
}
H
}
compute_B <- function(d,n){
B <-matrix(0, nrow = n, ncol = n)
B[1,1] <- d[1]/3
B[1,2] <- d[1]/6
B[n,n-1] <- d[n-1]/6
B[n,n] <- d[n-1]/3
for (i in 2:(nrow(B)-1)) {
B[i,i-1] <- d[i-1]/6
B[i,i] <- (d[i-1]+d[i])/3
B[i,i+1] <- d[i]/6
}
B
}
compute_A <- function(d,n){
A <-matrix(0, nrow = n, ncol = n)
A[1,1] <- d[1]/2
A[n,n] <- d[n-1]/2
for (i in 2:(nrow(A)-1)) {
A[i,i] <- (d[i-1]+d[i])/2
}
A
}
switch_matrix_once <- function(M, from, to){
L <- diag(1, nrow = nrow(M), ncol = nrow(M))
original_row <- L[to,]
L[to,] <- L[from,]
L[from,] <- original_row
L%*%M%*%t(L)
}
switch_matrix <- function(z, x, M){
all_grid <- sort(c(z,x))
n <- length(x)
for (i in 1:length(z)) {
z_location <- which(all_grid %in% z[i])
M <- switch_matrix_once(M,from = z_location, to = n + i)
all_grid[z_location] <- all_grid[n+i]
all_grid[n + i] <- z[i]
}
for (j in 1:length(x)) {
x_location <- which(all_grid %in% x[j])
M <- switch_matrix_once(M,from = x_location, to = j)
all_grid[x_location] <- all_grid[j]
all_grid[j] <- x[j]
}
M
}
Interpolation_vec_v1 <- function(t, x_grid, gx, GP, n_samples = 500){
all_grid <- sort(c(t,x_grid))
t_location <- which(all_grid %in% t)
n <- length(all_grid)
all_d <- diff(all_grid)
H <- compute_H_rue(all_d, n)
B <- compute_B(all_d, n)
A <- compute_A(all_d, n)
if(GP == "RW2"){
Q <- t(H) %*% solve(A) %*% H
}
else{
D <- H[-c(1,length(all_grid)),]
R <- B[-c(1,length(all_grid)), -c(1,length(all_grid))]
Q <- t(D) %*% solve(R) %*% D
}
C <- solve(Q + Diagonal(n, x = 0.00001))
C_trans <- switch_matrix(t,x_grid,C)
Q_trans <- forceSymmetric(solve(C_trans))
QAA <- Q_trans[(length(x_grid) + 1):n, (length(x_grid) + 1):n]
QAB <- Q_trans[(length(x_grid) + 1):n, 1:(length(x_grid))]
QBB <- Q[1:(length(x_grid)), 1:(length(x_grid))]
compute_conditional_mean <- function(gx){
conditional_mean <- -solve(QAA)%*% QAB %*% (gx)
conditional_mean
}
conditional_mean_list <- apply(gx, 2, compute_conditional_mean)
simulated_gz <- function(cmu){
Lt <- chol(QAA)
z <- rnorm(n = length(t))
v <- solve(a = Lt, b = z)
v + cmu
}
samples <- lapply(conditional_mean_list, simulated_gz)
samples
}
