mean_y_arima <- apply(sample_path_arima, 1, mean)
upper_y_arima <- apply(sample_path_arima, 1, quantile, p = 0.95)
lower_y_arima <- apply(sample_path_arima, 1, quantile, p = 0.05)
rIAE_arima <- sqrt(mean(abs(compute_g(z) - mean_y_arima)))
MCI_arima <- mean(upper_y_arima - lower_y_arima)
CR_arima <- mean(upper_y_arima >= compute_g(z) & lower_y_arima <= compute_g(z))
result <- tibble(rIAE_RW2 = rIAE_rw2, rIAE_ARIMA = rIAE_arima, MCI_RW2 = MCI_rw2, MCI_ARIMA = MCI_arima, CR_RW2 = CR_rw2, CR_ARIMA = CR_arima)
sample_path_arima_x <- construct_X %*% gz$samps
mean_x_arima <- sample_path_arima_x %>% apply(MARGIN = 1, FUN = mean)
plot(mean_y_arima ~ z, type = 'l', xlab = "region of interest", ylab = "y", col = "red", ylim = c(-10,10), lty = 1)
lines(upper_y_arima ~ z, lty = 2, col = 'orange')
lines(lower_y_arima ~ z, lty = 2, col = 'orange')
lines(compute_g(z) ~ z, lty = 3, col = 'black')
points(mean_x_arima ~ x, col = 'red')
for (i in sample.int(n_samp,30)) {
lines(unlist(sample_path_arima[,i]) ~ z, col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
title(main = "ARIMA for sparse covariate: g(.)")
dev.copy(pdf,'sim1-g-ARIMA.pdf')
dev.off()
#### First deriv:
sample_path_rw2_1stDeriv <- apply(sample_path_rw2, 2, diff)
sample_path_rw2_1stDeriv_mean <- apply(sample_path_rw2_1stDeriv, 1, mean)
sample_path_rw2_1stDeriv_upper <- apply(sample_path_rw2_1stDeriv, 1, quantile, p = 0.95)
sample_path_rw2_1stDeriv_lower <- apply(sample_path_rw2_1stDeriv, 1, quantile, p = 0.05)
CR_rw2_1st <- mean(sample_path_rw2_1stDeriv_upper >= diff(compute_g(z)) & sample_path_rw2_1stDeriv_lower <= diff(compute_g(z)) )
sample_path_arima_1stDeriv <- apply(sample_path_arima, 2, diff)
sample_path_arima_1stDeriv_mean <- apply(sample_path_arima_1stDeriv, 1, mean)
sample_path_arima_1stDeriv_upper <- apply(sample_path_arima_1stDeriv, 1, quantile, p = 0.95)
sample_path_arima_1stDeriv_lower <- apply(sample_path_arima_1stDeriv, 1, quantile, p = 0.05)
CR_arima_1st <- mean(sample_path_arima_1stDeriv_upper >= diff(compute_g(z)) & sample_path_arima_1stDeriv_lower <= diff(compute_g(z)) )
result_1st <- tibble(rIAE_RW2_1st = sqrt(mean(abs(diff(compute_g(z))/h - sample_path_rw2_1stDeriv_mean/h))), rIAE_ARIMA_1st = sqrt(mean(abs(diff(compute_g(z))/h - sample_path_arima_1stDeriv_mean/h))), MCI_RW2_1st = mean(sample_path_rw2_1stDeriv_upper - sample_path_rw2_1stDeriv_lower)/h, MCI_ARIMA_1st = mean(sample_path_arima_1stDeriv_upper - sample_path_arima_1stDeriv_lower)/h, CR_RW2_1st = CR_rw2_1st, CR_ARIMA_1st = CR_arima_1st)
result <- cbind(result, result_1st)
### Second deriv
sample_path_rw2_2ndDeriv <- apply(sample_path_rw2, 2, diff, differences = 2)
sample_path_rw2_2ndDeriv_mean <- apply(sample_path_rw2_2ndDeriv, 1, mean)
sample_path_rw2_2ndDeriv_upper <- apply(sample_path_rw2_2ndDeriv, 1, quantile, p = 0.95)
sample_path_rw2_2ndDeriv_lower <- apply(sample_path_rw2_2ndDeriv, 1, quantile, p = 0.05)
CR_rw2_2nd <- mean(sample_path_rw2_2ndDeriv_upper >= diff(compute_g(z), differences = 2) & sample_path_rw2_2ndDeriv_lower <= diff(compute_g(z), differences = 2))
sample_path_arima_2ndDeriv <- apply(sample_path_arima, 2, diff, differences = 2)
sample_path_arima_2ndDeriv_mean <- apply(sample_path_arima_2ndDeriv, 1, mean)
sample_path_arima_2ndDeriv_upper <- apply(sample_path_arima_2ndDeriv, 1, quantile, p = 0.95)
sample_path_arima_2ndDeriv_lower <- apply(sample_path_arima_2ndDeriv, 1, quantile, p = 0.05)
CR_arima_2nd <- mean(sample_path_arima_2ndDeriv_upper >= diff(compute_g(z), differences = 2) & sample_path_arima_2ndDeriv_lower <= diff(compute_g(z), differences = 2))
result_2nd <- tibble(rIAE_RW2_2nd = sqrt(mean(abs(diff(compute_g(z), differences = 2)/(h^2) - sample_path_rw2_2ndDeriv_mean/(h^2)))), rIAE_ARIMA_2nd = sqrt(mean(abs(diff(compute_g(z), differences = 2)/(h^2) - sample_path_arima_2ndDeriv_mean/(h^2)))), MCI_RW2_2nd = mean(sample_path_rw2_2ndDeriv_upper - sample_path_rw2_2ndDeriv_lower)/(h^2), MCI_ARIMA_2nd = mean(sample_path_arima_2ndDeriv_upper - sample_path_arima_2ndDeriv_lower)/(h^2), CR_RW2_2nd = CR_rw2_2nd, CR_ARIMA_2nd = CR_arima_2nd)
plot(diff(compute_g(z))/h ~ z[-1], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "1st deriv", ylim = c(-3,3), main = "RW2 for sparse covariate: 1st deriv")
lines(sample_path_rw2_1stDeriv_mean/h ~ z[-1], col = 'red')
lines(sample_path_rw2_1stDeriv_upper/h ~ z[-1], col = 'orange', lty = 2)
lines(sample_path_rw2_1stDeriv_lower/h ~ z[-1], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_rw2_1stDeriv[,i])/h ~ z[-1], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim1-g1st-RW2.pdf')
dev.off()
plot(diff(compute_g(z))/h ~ z[-1], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "1st deriv", ylim = c(-3,3), main = "ARIMA for sparse covariate: 1st deriv")
lines(sample_path_arima_1stDeriv_mean/h ~ z[-1], col = 'red')
lines(sample_path_arima_1stDeriv_upper/h ~ z[-1], col = 'orange', lty = 2)
lines(sample_path_arima_1stDeriv_lower/h ~ z[-1], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_arima_1stDeriv[,i])/h ~ z[-1], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim1-g1st-ARIMA.pdf')
dev.off()
plot((diff(compute_g(z), differences = 2)/(h^2)) ~ z[-c(1,2)], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "2nd deriv", ylim = c(-1,1), main = "RW2 for sparse covariate: 2nd deriv")
lines(sample_path_rw2_2ndDeriv_mean/(h^2) ~ z[-c(1,2)], col = 'red')
lines(sample_path_rw2_2ndDeriv_upper/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
lines(sample_path_rw2_2ndDeriv_lower/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_rw2_2ndDeriv[,i])/(h^2) ~ z[-c(1,2)], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim1-g2nd-RW2.pdf')
dev.off()
plot(diff(compute_g(z), differences = 2)/(h^2) ~ z[-c(1,2)], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "2nd deriv", ylim = c(-1,1), main = "ARIMA for sparse covariate: 2nd deriv")
lines(sample_path_arima_2ndDeriv_mean/(h^2) ~ z[-c(1,2)], col = 'red')
lines(sample_path_arima_2ndDeriv_upper/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
lines(sample_path_arima_2ndDeriv_lower/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_arima_2ndDeriv[,i])/(h^2) ~ z[-c(1,2)], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim1-g2nd-ARIMA.pdf')
dev.off()
result_2nd
result_1st
result
result <- tibble(rIAE_RW2 = rIAE_rw2, rIAE_ARIMA = rIAE_arima, MCI_RW2 = MCI_rw2, MCI_ARIMA = MCI_arima, CR_RW2 = CR_rw2, CR_ARIMA = CR_arima)
result
result_1st
result_2nd
#############################################################
#############################################################
### Case 2: medium spacing
set.seed(123)
dis <- 4
z <- round(seq(0.5,100, 0.5),2)
x <- seq(1, 100, dis*0.5)
x_indx <- which(z %in% x)
construct_X <- construct_A(z, x_indx)
d <- diff(z)
H <- compute_H_rue(d,n = length(z))
B <- compute_B(d,n = length(z))
A <- compute_A(d, n = length(z))
k_n <- 2
###### RW2:
Q1 <- t(H) %*% solve(A) %*% H
Q1 <- as(Q1 + Diagonal(length(z), x = 1e-5), "dgTMatrix")
###### ARIMA:
D <- H[-c(1,length(z)),]
R <- B[-c(1,length(z)), -c(1,length(z))]
Q3 <- t(D) %*% solve(R) %*% D
Q3 <- as(as.matrix(Q3 + Diagonal(length(z), x = 1e-5)), "dgTMatrix")
x <- z[x_indx]
compute_g <- function(x){
5*sin(0.1*x)
}
k <- length(x)
n <- k * k_n
y <- compute_g(rep(x, each = k_n)) + rnorm(n, sd = sqrt(3))
d <- diff(z)
h <- mean(d)
m <- length(z[-x_indx])
X <- as(construct_X, "dgTMatrix")
X <- X[rep(c(1:k), each = k_n),]
tmbdat <- list(
# Design matrix
X = X,
# Penalty(Precision) matrix
P = Q1,
# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(Q1,logarithm = TRUE)$modulus),
# Response
y = y,
# PC Prior params
u1 = 5,
alpha1 = 0.1,
u2 = 5,
alpha2 = 0.1
)
tmbparams <- list(
W = rep(0, length(z)), # W = c(U); U = B-Spline coefficients
theta1 = 0, # -2log(sigma)
theta2 = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_RW2Comparison",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
quad <- aghq::marginal_laplace_tmb(ff,7,c(0,0))
gz <- sample_marginal(quad, n_samp)
sample_path_rw2 <- gz$samps
sample_path_rw2 <- as.tibble(as.matrix(sample_path_rw2))
mean_y_rw2 <- apply(sample_path_rw2, 1, mean)
upper_y_rw2 <- apply(sample_path_rw2, 1, quantile, p = 0.95)
lower_y_rw2 <- apply(sample_path_rw2, 1, quantile, p = 0.05)
rIAE_rw2 <- sqrt(mean(abs(compute_g(z) - mean_y_rw2)))
MCI_rw2 <- mean(upper_y_rw2 - lower_y_rw2)
CR_rw2 <- mean(upper_y_rw2 >= compute_g(z) & lower_y_rw2 <= compute_g(z))
sample_path_rw2_x <- construct_X %*% gz$samps
mean_x_rw2 <- sample_path_rw2_x %>% apply(MARGIN = 1, FUN = mean)
plot(mean_y_rw2 ~ z, type = 'l', xlab = "region of interest", ylab = "y", col = "red", ylim = c(-10,10), lty = 1)
lines(upper_y_rw2 ~ z, lty = 2, col = 'orange')
lines(lower_y_rw2 ~ z, lty = 2, col = 'orange')
lines(compute_g(z) ~ z, lty = 3, col = 'black')
points(mean_x_rw2 ~ x, col = 'red')
for (i in sample.int(n_samp,30)) {
lines(unlist(sample_path_rw2[,i]) ~ z, col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
title(main = "RW2 for regular covariate: g(.)")
dev.copy(pdf,'sim2-g-RW2.pdf')
dev.off()
tmbdat <- list(
# Design matrix
X = X,
# Penalty(Precision) matrix
P = Q3,
# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(Q3,logarithm = TRUE)$modulus),
# Response
y = y,
# PC Prior params
u1 = 5,
alpha1 = 0.1,
u2 = 5,
alpha2 = 0.1
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_RW2Comparison",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,7,c(0,0))
gz <- sample_marginal(quad, n_samp)
sample_path_arima <- gz$samps
mean_y_arima <- apply(sample_path_arima, 1, mean)
upper_y_arima <- apply(sample_path_arima, 1, quantile, p = 0.95)
lower_y_arima <- apply(sample_path_arima, 1, quantile, p = 0.05)
rIAE_arima <- sqrt(mean(abs(compute_g(z) - mean_y_arima)))
MCI_arima <- mean(upper_y_arima - lower_y_arima)
CR_arima <- mean(upper_y_arima >= compute_g(z) & lower_y_arima <= compute_g(z))
result <- tibble(rIAE_RW2 = rIAE_rw2, rIAE_ARIMA = rIAE_arima, MCI_RW2 = MCI_rw2, MCI_ARIMA = MCI_arima, CR_RW2 = CR_rw2, CR_ARIMA = CR_arima)
sample_path_arima_x <- construct_X %*% gz$samps
mean_x_arima <- sample_path_arima_x %>% apply(MARGIN = 1, FUN = mean)
plot(mean_y_arima ~ z, type = 'l', xlab = "region of interest", ylab = "y", col = "red", ylim = c(-10,10), lty = 1)
lines(upper_y_arima ~ z, lty = 2, col = 'orange')
lines(lower_y_arima ~ z, lty = 2, col = 'orange')
lines(compute_g(z) ~ z, lty = 3, col = 'black')
points(mean_x_arima ~ x, col = 'red')
for (i in sample.int(n_samp,30)) {
lines(unlist(sample_path_arima[,i]) ~ z, col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
title(main = "ARIMA for regular covariate: g(.)")
dev.copy(pdf,'sim2-g-ARIMA.pdf')
dev.off()
#### First deriv:
sample_path_rw2_1stDeriv <- apply(sample_path_rw2, 2, diff)
sample_path_rw2_1stDeriv_mean <- apply(sample_path_rw2_1stDeriv, 1, mean)
sample_path_rw2_1stDeriv_upper <- apply(sample_path_rw2_1stDeriv, 1, quantile, p = 0.95)
sample_path_rw2_1stDeriv_lower <- apply(sample_path_rw2_1stDeriv, 1, quantile, p = 0.05)
CR_rw2_1st <- mean(sample_path_rw2_1stDeriv_upper >= diff(compute_g(z)) & sample_path_rw2_1stDeriv_lower <= diff(compute_g(z)) )
sample_path_arima_1stDeriv <- apply(sample_path_arima, 2, diff)
sample_path_arima_1stDeriv_mean <- apply(sample_path_arima_1stDeriv, 1, mean)
sample_path_arima_1stDeriv_upper <- apply(sample_path_arima_1stDeriv, 1, quantile, p = 0.95)
sample_path_arima_1stDeriv_lower <- apply(sample_path_arima_1stDeriv, 1, quantile, p = 0.05)
CR_arima_1st <- mean(sample_path_arima_1stDeriv_upper >= diff(compute_g(z)) & sample_path_arima_1stDeriv_lower <= diff(compute_g(z)) )
result_1st <- tibble(rIAE_RW2_1st = sqrt(mean(abs(diff(compute_g(z))/h - sample_path_rw2_1stDeriv_mean/h))), rIAE_ARIMA_1st = sqrt(mean(abs(diff(compute_g(z))/h - sample_path_arima_1stDeriv_mean/h))), MCI_RW2_1st = mean(sample_path_rw2_1stDeriv_upper - sample_path_rw2_1stDeriv_lower)/h, MCI_ARIMA_1st = mean(sample_path_arima_1stDeriv_upper - sample_path_arima_1stDeriv_lower)/h, CR_RW2_1st = CR_rw2_1st, CR_ARIMA_1st = CR_arima_1st)
result <- cbind(result, result_1st)
### Second deriv
sample_path_rw2_2ndDeriv <- apply(sample_path_rw2, 2, diff, differences = 2)
sample_path_rw2_2ndDeriv_mean <- apply(sample_path_rw2_2ndDeriv, 1, mean)
sample_path_rw2_2ndDeriv_upper <- apply(sample_path_rw2_2ndDeriv, 1, quantile, p = 0.95)
sample_path_rw2_2ndDeriv_lower <- apply(sample_path_rw2_2ndDeriv, 1, quantile, p = 0.05)
CR_rw2_2nd <- mean(sample_path_rw2_2ndDeriv_upper >= diff(compute_g(z), differences = 2) & sample_path_rw2_2ndDeriv_lower <= diff(compute_g(z), differences = 2))
sample_path_arima_2ndDeriv <- apply(sample_path_arima, 2, diff, differences = 2)
sample_path_arima_2ndDeriv_mean <- apply(sample_path_arima_2ndDeriv, 1, mean)
sample_path_arima_2ndDeriv_upper <- apply(sample_path_arima_2ndDeriv, 1, quantile, p = 0.95)
sample_path_arima_2ndDeriv_lower <- apply(sample_path_arima_2ndDeriv, 1, quantile, p = 0.05)
CR_arima_2nd <- mean(sample_path_arima_2ndDeriv_upper >= diff(compute_g(z), differences = 2) & sample_path_arima_2ndDeriv_lower <= diff(compute_g(z), differences = 2))
result_2nd <- tibble(rIAE_RW2_2nd = sqrt(mean(abs(diff(compute_g(z), differences = 2)/(h^2) - sample_path_rw2_2ndDeriv_mean/(h^2)))), rIAE_ARIMA_2nd = sqrt(mean(abs(diff(compute_g(z), differences = 2)/(h^2) - sample_path_arima_2ndDeriv_mean/(h^2)))), MCI_RW2_2nd = mean(sample_path_rw2_2ndDeriv_upper - sample_path_rw2_2ndDeriv_lower)/(h^2), MCI_ARIMA_2nd = mean(sample_path_arima_2ndDeriv_upper - sample_path_arima_2ndDeriv_lower)/(h^2), CR_RW2_2nd = CR_rw2_2nd, CR_ARIMA_2nd = CR_arima_2nd)
plot(diff(compute_g(z))/h ~ z[-1], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "1st deriv", ylim = c(-3,3), main = "RW2 for regular covariate: 1st deriv")
lines(sample_path_rw2_1stDeriv_mean/h ~ z[-1], col = 'red')
lines(sample_path_rw2_1stDeriv_upper/h ~ z[-1], col = 'orange', lty = 2)
lines(sample_path_rw2_1stDeriv_lower/h ~ z[-1], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_rw2_1stDeriv[,i])/h ~ z[-1], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim2-g1st-RW2.pdf')
dev.off()
plot(diff(compute_g(z))/h ~ z[-1], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "1st deriv", ylim = c(-3,3), main = "ARIMA for regular covariate: 1st deriv")
lines(sample_path_arima_1stDeriv_mean/h ~ z[-1], col = 'red')
lines(sample_path_arima_1stDeriv_upper/h ~ z[-1], col = 'orange', lty = 2)
lines(sample_path_arima_1stDeriv_lower/h ~ z[-1], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_arima_1stDeriv[,i])/h ~ z[-1], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim2-g1st-ARIMA.pdf')
dev.off()
plot((diff(compute_g(z), differences = 2)/(h^2)) ~ z[-c(1,2)], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "2nd deriv", ylim = c(-1,1), main = "RW2 for regular covariate: 2nd deriv")
lines(sample_path_rw2_2ndDeriv_mean/(h^2) ~ z[-c(1,2)], col = 'red')
lines(sample_path_rw2_2ndDeriv_upper/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
lines(sample_path_rw2_2ndDeriv_lower/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_rw2_2ndDeriv[,i])/(h^2) ~ z[-c(1,2)], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim2-g2nd-RW2.pdf')
dev.off()
plot(diff(compute_g(z), differences = 2)/(h^2) ~ z[-c(1,2)], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "2nd deriv", ylim = c(-1,1), main = "ARIMA for regular covariate: 2nd deriv")
lines(sample_path_arima_2ndDeriv_mean/(h^2) ~ z[-c(1,2)], col = 'red')
lines(sample_path_arima_2ndDeriv_upper/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
lines(sample_path_arima_2ndDeriv_lower/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_arima_2ndDeriv[,i])/(h^2) ~ z[-c(1,2)], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim2-g2nd-ARIMA.pdf')
dev.off()
result <- tibble(rIAE_RW2 = rIAE_rw2, rIAE_ARIMA = rIAE_arima, MCI_RW2 = MCI_rw2, MCI_ARIMA = MCI_arima, CR_RW2 = CR_rw2, CR_ARIMA = CR_arima)
result
result_1st
result_2nd
#############################################################
#############################################################
### Case 3: dense spacing
set.seed(123)
dis <- 2
z <- round(seq(0.5,100, 0.5),2)
x <- seq(1, 100, dis*0.5)
x_indx <- which(z %in% x)
construct_X <- construct_A(z, x_indx)
d <- diff(z)
H <- compute_H_rue(d,n = length(z))
B <- compute_B(d,n = length(z))
A <- compute_A(d, n = length(z))
k_n <- 1
###### RW2:
Q1 <- t(H) %*% solve(A) %*% H
Q1 <- as(Q1 + Diagonal(length(z), x = 1e-5), "dgTMatrix")
###### ARIMA:
D <- H[-c(1,length(z)),]
R <- B[-c(1,length(z)), -c(1,length(z))]
Q3 <- t(D) %*% solve(R) %*% D
Q3 <- as(as.matrix(Q3 + Diagonal(length(z), x = 1e-5)), "dgTMatrix")
x <- z[x_indx]
compute_g <- function(x){
5*sin(0.1*x)
}
k <- length(x)
n <- k * k_n
y <- compute_g(rep(x, each = k_n)) + rnorm(n, sd = sqrt(3))
d <- diff(z)
h <- mean(d)
m <- length(z[-x_indx])
X <- as(construct_X, "dgTMatrix")
X <- X[rep(c(1:k), each = k_n),]
tmbdat <- list(
# Design matrix
X = X,
# Penalty(Precision) matrix
P = Q1,
# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(Q1,logarithm = TRUE)$modulus),
# Response
y = y,
# PC Prior params
u1 = 5,
alpha1 = 0.1,
u2 = 5,
alpha2 = 0.1
)
tmbparams <- list(
W = rep(0, length(z)), # W = c(U); U = B-Spline coefficients
theta1 = 0, # -2log(sigma)
theta2 = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_RW2Comparison",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
quad <- aghq::marginal_laplace_tmb(ff,7,c(0,0))
gz <- sample_marginal(quad, n_samp)
sample_path_rw2 <- gz$samps
sample_path_rw2 <- as.tibble(as.matrix(sample_path_rw2))
mean_y_rw2 <- apply(sample_path_rw2, 1, mean)
upper_y_rw2 <- apply(sample_path_rw2, 1, quantile, p = 0.95)
lower_y_rw2 <- apply(sample_path_rw2, 1, quantile, p = 0.05)
rIAE_rw2 <- sqrt(mean(abs(compute_g(z) - mean_y_rw2)))
MCI_rw2 <- mean(upper_y_rw2 - lower_y_rw2)
CR_rw2 <- mean(upper_y_rw2 >= compute_g(z) & lower_y_rw2 <= compute_g(z))
sample_path_rw2_x <- construct_X %*% gz$samps
mean_x_rw2 <- sample_path_rw2_x %>% apply(MARGIN = 1, FUN = mean)
plot(mean_y_rw2 ~ z, type = 'l', xlab = "region of interest", ylab = "y", col = "red", ylim = c(-10,10), lty = 1)
lines(upper_y_rw2 ~ z, lty = 2, col = 'orange')
lines(lower_y_rw2 ~ z, lty = 2, col = 'orange')
lines(compute_g(z) ~ z, lty = 3, col = 'black')
points(mean_x_rw2 ~ x, col = 'red')
for (i in sample.int(n_samp,30)) {
lines(unlist(sample_path_rw2[,i]) ~ z, col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
title(main = "RW2 for dense covariate: g(.)")
dev.copy(pdf,'sim3-g-RW2.pdf')
dev.off()
tmbdat <- list(
# Design matrix
X = X,
# Penalty(Precision) matrix
P = Q3,
# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(Q3,logarithm = TRUE)$modulus),
# Response
y = y,
# PC Prior params
u1 = 5,
alpha1 = 0.1,
u2 = 5,
alpha2 = 0.1
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_RW2Comparison",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,7,c(0,0))
gz <- sample_marginal(quad, n_samp)
sample_path_arima <- gz$samps
mean_y_arima <- apply(sample_path_arima, 1, mean)
upper_y_arima <- apply(sample_path_arima, 1, quantile, p = 0.95)
lower_y_arima <- apply(sample_path_arima, 1, quantile, p = 0.05)
rIAE_arima <- sqrt(mean(abs(compute_g(z) - mean_y_arima)))
MCI_arima <- mean(upper_y_arima - lower_y_arima)
CR_arima <- mean(upper_y_arima >= compute_g(z) & lower_y_arima <= compute_g(z))
result <- tibble(rIAE_RW2 = rIAE_rw2, rIAE_ARIMA = rIAE_arima, MCI_RW2 = MCI_rw2, MCI_ARIMA = MCI_arima, CR_RW2 = CR_rw2, CR_ARIMA = CR_arima)
sample_path_arima_x <- construct_X %*% gz$samps
mean_x_arima <- sample_path_arima_x %>% apply(MARGIN = 1, FUN = mean)
plot(mean_y_arima ~ z, type = 'l', xlab = "region of interest", ylab = "y", col = "red", ylim = c(-10,10), lty = 1)
lines(upper_y_arima ~ z, lty = 2, col = 'orange')
lines(lower_y_arima ~ z, lty = 2, col = 'orange')
lines(compute_g(z) ~ z, lty = 3, col = 'black')
points(mean_x_arima ~ x, col = 'red')
for (i in sample.int(n_samp,30)) {
lines(unlist(sample_path_arima[,i]) ~ z, col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
title(main = "ARIMA for dense covariate: g(.)")
dev.copy(pdf,'sim3-g-ARIMA.pdf')
dev.off()
#### First deriv:
sample_path_rw2_1stDeriv <- apply(sample_path_rw2, 2, diff)
sample_path_rw2_1stDeriv_mean <- apply(sample_path_rw2_1stDeriv, 1, mean)
sample_path_rw2_1stDeriv_upper <- apply(sample_path_rw2_1stDeriv, 1, quantile, p = 0.95)
sample_path_rw2_1stDeriv_lower <- apply(sample_path_rw2_1stDeriv, 1, quantile, p = 0.05)
CR_rw2_1st <- mean(sample_path_rw2_1stDeriv_upper >= diff(compute_g(z)) & sample_path_rw2_1stDeriv_lower <= diff(compute_g(z)) )
sample_path_arima_1stDeriv <- apply(sample_path_arima, 2, diff)
sample_path_arima_1stDeriv_mean <- apply(sample_path_arima_1stDeriv, 1, mean)
sample_path_arima_1stDeriv_upper <- apply(sample_path_arima_1stDeriv, 1, quantile, p = 0.95)
sample_path_arima_1stDeriv_lower <- apply(sample_path_arima_1stDeriv, 1, quantile, p = 0.05)
CR_arima_1st <- mean(sample_path_arima_1stDeriv_upper >= diff(compute_g(z)) & sample_path_arima_1stDeriv_lower <= diff(compute_g(z)) )
result_1st <- tibble(rIAE_RW2_1st = sqrt(mean(abs(diff(compute_g(z))/h - sample_path_rw2_1stDeriv_mean/h))), rIAE_ARIMA_1st = sqrt(mean(abs(diff(compute_g(z))/h - sample_path_arima_1stDeriv_mean/h))), MCI_RW2_1st = mean(sample_path_rw2_1stDeriv_upper - sample_path_rw2_1stDeriv_lower)/h, MCI_ARIMA_1st = mean(sample_path_arima_1stDeriv_upper - sample_path_arima_1stDeriv_lower)/h, CR_RW2_1st = CR_rw2_1st, CR_ARIMA_1st = CR_arima_1st)
result <- cbind(result, result_1st)
### Second deriv
sample_path_rw2_2ndDeriv <- apply(sample_path_rw2, 2, diff, differences = 2)
sample_path_rw2_2ndDeriv_mean <- apply(sample_path_rw2_2ndDeriv, 1, mean)
sample_path_rw2_2ndDeriv_upper <- apply(sample_path_rw2_2ndDeriv, 1, quantile, p = 0.95)
sample_path_rw2_2ndDeriv_lower <- apply(sample_path_rw2_2ndDeriv, 1, quantile, p = 0.05)
CR_rw2_2nd <- mean(sample_path_rw2_2ndDeriv_upper >= diff(compute_g(z), differences = 2) & sample_path_rw2_2ndDeriv_lower <= diff(compute_g(z), differences = 2))
sample_path_arima_2ndDeriv <- apply(sample_path_arima, 2, diff, differences = 2)
sample_path_arima_2ndDeriv_mean <- apply(sample_path_arima_2ndDeriv, 1, mean)
sample_path_arima_2ndDeriv_upper <- apply(sample_path_arima_2ndDeriv, 1, quantile, p = 0.95)
sample_path_arima_2ndDeriv_lower <- apply(sample_path_arima_2ndDeriv, 1, quantile, p = 0.05)
CR_arima_2nd <- mean(sample_path_arima_2ndDeriv_upper >= diff(compute_g(z), differences = 2) & sample_path_arima_2ndDeriv_lower <= diff(compute_g(z), differences = 2))
result_2nd <- tibble(rIAE_RW2_2nd = sqrt(mean(abs(diff(compute_g(z), differences = 2)/(h^2) - sample_path_rw2_2ndDeriv_mean/(h^2)))), rIAE_ARIMA_2nd = sqrt(mean(abs(diff(compute_g(z), differences = 2)/(h^2) - sample_path_arima_2ndDeriv_mean/(h^2)))), MCI_RW2_2nd = mean(sample_path_rw2_2ndDeriv_upper - sample_path_rw2_2ndDeriv_lower)/(h^2), MCI_ARIMA_2nd = mean(sample_path_arima_2ndDeriv_upper - sample_path_arima_2ndDeriv_lower)/(h^2), CR_RW2_2nd = CR_rw2_2nd, CR_ARIMA_2nd = CR_arima_2nd)
plot(diff(compute_g(z))/h ~ z[-1], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "1st deriv", ylim = c(-3,3), main = "RW2 for dense covariate: 1st deriv")
lines(sample_path_rw2_1stDeriv_mean/h ~ z[-1], col = 'red')
lines(sample_path_rw2_1stDeriv_upper/h ~ z[-1], col = 'orange', lty = 2)
lines(sample_path_rw2_1stDeriv_lower/h ~ z[-1], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_rw2_1stDeriv[,i])/h ~ z[-1], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim3-g1st-RW2.pdf')
dev.off()
plot(diff(compute_g(z))/h ~ z[-1], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "1st deriv", ylim = c(-3,3), main = "ARIMA for dense covariate: 1st deriv")
lines(sample_path_arima_1stDeriv_mean/h ~ z[-1], col = 'red')
lines(sample_path_arima_1stDeriv_upper/h ~ z[-1], col = 'orange', lty = 2)
lines(sample_path_arima_1stDeriv_lower/h ~ z[-1], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_arima_1stDeriv[,i])/h ~ z[-1], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim3-g1st-ARIMA.pdf')
dev.off()
plot((diff(compute_g(z), differences = 2)/(h^2)) ~ z[-c(1,2)], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "2nd deriv", ylim = c(-1,1), main = "RW2 for dense covariate: 2nd deriv")
lines(sample_path_rw2_2ndDeriv_mean/(h^2) ~ z[-c(1,2)], col = 'red')
lines(sample_path_rw2_2ndDeriv_upper/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
lines(sample_path_rw2_2ndDeriv_lower/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_rw2_2ndDeriv[,i])/(h^2) ~ z[-c(1,2)], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim3-g2nd-RW2.pdf')
dev.off()
plot(diff(compute_g(z), differences = 2)/(h^2) ~ z[-c(1,2)], type = 'l', col = 'black',
xlab = "region of interest",
ylab = "2nd deriv", ylim = c(-1,1), main = "ARIMA for dense covariate: 2nd deriv")
lines(sample_path_arima_2ndDeriv_mean/(h^2) ~ z[-c(1,2)], col = 'red')
lines(sample_path_arima_2ndDeriv_upper/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
lines(sample_path_arima_2ndDeriv_lower/(h^2) ~ z[-c(1,2)], col = 'orange', lty = 2)
for (i in sample.int(n_samp,5)) {
lines(unlist(sample_path_arima_2ndDeriv[,i])/(h^2) ~ z[-c(1,2)], col = rgb(0, 0, 255, max = 255, alpha = 20, names = "grey"))
}
dev.copy(pdf,'sim3-g2nd-ARIMA.pdf')
dev.off()
result_2nd
result_1st
result <- tibble(rIAE_RW2 = rIAE_rw2, rIAE_ARIMA = rIAE_arima, MCI_RW2 = MCI_rw2, MCI_ARIMA = MCI_arima, CR_RW2 = CR_rw2, CR_ARIMA = CR_arima)
result
(0.516 - 0.505) / 0.505
(0.619 - 0.501) / 0.501
(0.516 - 0.501) / 0.501
(0.619 - 0.503) / 0.503
